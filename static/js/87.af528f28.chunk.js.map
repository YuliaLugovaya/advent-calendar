{"version":3,"file":"static/js/87.af528f28.chunk.js","mappings":"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","sources":["pages/EditPage/components/EditTask/EditTask.styled.ts","pages/EditPage/components/EditTask/EditTask.tsx","pages/EditPage/EditPage.tsx","store/edit/editActions.ts"],"sourcesContent":["export const styles = {\r\n  editContainer: {\r\n    maxWidth: \"1200px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    gap: \"10px\",\r\n    m: \"0 auto\",\r\n    pt: {\r\n      xs: \"100px\",\r\n      md: \"150px\",\r\n    },\r\n    pb: {\r\n      xs: \"50px\",\r\n      md: \"100px\",\r\n    },\r\n  },\r\n  editTable: {\r\n    fontSize: {\r\n      xs: 14,\r\n      md: 16,\r\n    },\r\n    p: {\r\n      xs: \"5px\",\r\n      md: \"16px\",\r\n    },\r\n  },\r\n  editTitle: {\r\n    fontSize: {\r\n      xs: 14,\r\n      md: 16,\r\n    },\r\n    p: {\r\n      xs: \"5px\",\r\n      md: \"16px\",\r\n    },\r\n    wordBreak: {\r\n      xs: \"break-all\",\r\n      sm: \"normal\",\r\n    },\r\n  },\r\n  editHead: {\r\n    bgcolor: \"#c29463\",\r\n  },\r\n  editTitles: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: {\r\n      xs: 16,\r\n      md: 18,\r\n    },\r\n    p: {\r\n      xs: \"5px\",\r\n      md: \"16px\",\r\n    },\r\n  },\r\n  editTextarea: {\r\n    width: \"100%\",\r\n  },\r\n  editButton: {\r\n    color: \"#d99f94\",\r\n    \"&:hover\": {\r\n      bgcolor: \"transparent\",\r\n    },\r\n    minWidth: \"35px\",\r\n  },\r\n  saveButton: {\r\n    color: \"#94a975\",\r\n    \"&:hover\": {\r\n      bgcolor: \"transparent\",\r\n    },\r\n    minWidth: \"35px\",\r\n  },\r\n  editIcon: {\r\n    width: \"35px\",\r\n  },\r\n};\r\n","import React, { FC, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  CardMedia,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Typography,\r\n  useMediaQuery,\r\n} from \"@mui/material\";\r\nimport { styles } from \"./EditTask.styled\";\r\nimport { CalendarItemsState, Task } from \"store/edit/editTypes\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateTask } from \"store/edit/editActions\";\r\nimport edit from \"assets/images/png/edit.png\";\r\nimport done from \"assets/images/png/complete.png\";\r\n\r\nexport const EditTask: FC = () => {\r\n  const tasks = useSelector(\r\n    (rootReducer: { edit: CalendarItemsState }) => rootReducer.edit.tasks,\r\n  );\r\n  const isMobile = useMediaQuery(\"(max-width: 767px)\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\r\n  const [editedTitle, setEditedTitle] = useState(\"\");\r\n  const [editedTask, setEditedTask] = useState(\"\");\r\n\r\n  const handleEdit = (task: Task) => {\r\n    setEditingTask(task);\r\n    setEditedTitle(task.title);\r\n    setEditedTask(task.task);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (!editingTask) return;\r\n\r\n    const updatedTask: Task = {\r\n      ...editingTask,\r\n      title: editedTitle,\r\n      task: editedTask,\r\n    };\r\n\r\n    dispatch(updateTask(updatedTask));\r\n\r\n    setEditingTask(null);\r\n    setEditedTitle(\"\");\r\n    setEditedTask(\"\");\r\n  };\r\n\r\n  return (\r\n    <Box sx={styles.editContainer}>\r\n      <Table>\r\n        <TableHead sx={styles.editHead}>\r\n          <TableRow>\r\n            <TableCell sx={styles.editTitles}>\r\n              {isMobile ? (\r\n                <Typography>N</Typography>\r\n              ) : (\r\n                <Typography>Число</Typography>\r\n              )}\r\n            </TableCell>\r\n            <TableCell sx={styles.editTitles}>Заголовок</TableCell>\r\n            <TableCell sx={styles.editTitles}>Задание</TableCell>\r\n            <TableCell sx={styles.editTitles}>\r\n              {isMobile ? (\r\n                <Typography>Ред.</Typography>\r\n              ) : (\r\n                <Typography>Опция</Typography>\r\n              )}\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {tasks.map((item) => (\r\n            <TableRow key={item.id}>\r\n              <TableCell sx={styles.editTable}>{item.text}</TableCell>\r\n              <TableCell sx={styles.editTitle}>\r\n                {editingTask?.id === item.id ? (\r\n                  <TextField\r\n                    value={editedTitle}\r\n                    onChange={(e) => setEditedTitle(e.target.value)}\r\n                    multiline\r\n                    sx={styles.editTextarea}\r\n                  />\r\n                ) : (\r\n                  item.title\r\n                )}\r\n              </TableCell>\r\n              <TableCell sx={styles.editTable}>\r\n                {editingTask?.id === item.id ? (\r\n                  <TextField\r\n                    value={editedTask}\r\n                    onChange={(e) => setEditedTask(e.target.value)}\r\n                    multiline\r\n                    sx={styles.editTextarea}\r\n                  />\r\n                ) : (\r\n                  item.task\r\n                )}\r\n              </TableCell>\r\n              <TableCell sx={styles.editTable}>\r\n                {editingTask?.id === item.id ? (\r\n                  <Button onClick={handleSave} sx={styles.saveButton}>\r\n                    {isMobile ? (\r\n                      <CardMedia\r\n                        sx={styles.editIcon}\r\n                        component=\"img\"\r\n                        image={done}\r\n                        alt=\"Save\"\r\n                      />\r\n                    ) : (\r\n                      <Typography>Сохранить</Typography>\r\n                    )}\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                    onClick={() => handleEdit(item)}\r\n                    sx={styles.editButton}\r\n                  >\r\n                    {isMobile ? (\r\n                      <CardMedia\r\n                        sx={styles.editIcon}\r\n                        component=\"img\"\r\n                        image={edit}\r\n                        alt=\"Save\"\r\n                      />\r\n                    ) : (\r\n                      <Typography>Редактировать</Typography>\r\n                    )}\r\n                  </Button>\r\n                )}\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Box>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { EditTask } from \"./components/EditTask\";\r\n\r\nconst EditPage = () => {\r\n  return (\r\n    <>\r\n      <EditTask />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditPage;\r\n","import {\r\n  CalendarItemsActionTypes,\r\n  ResetEditStateAction,\r\n  Task,\r\n  UpdateTaskAction,\r\n} from \"./editTypes\";\r\n\r\nexport const updateTask = (task: Task): UpdateTaskAction => ({\r\n  type: CalendarItemsActionTypes.UPDATE_TASK,\r\n  payload: task,\r\n});\r\n\r\nexport const resetEditState = (): ResetEditStateAction => {\r\n  return {\r\n    type: CalendarItemsActionTypes.RESET_EDIT_STATE,\r\n  };\r\n};\r\n"],"names":["styles","editContainer","maxWidth","display","flexDirection","justifyContent","alignItems","gap","m","pt","xs","md","pb","editTable","fontSize","p","editTitle","wordBreak","sm","editHead","bgcolor","editTitles","color","editTextarea","width","editButton","minWidth","saveButton","editIcon","EditTask","tasks","useSelector","rootReducer","edit","isMobile","useMediaQuery","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","editingTask","setEditingTask","_useState3","_useState4","editedTitle","setEditedTitle","_useState5","_useState6","editedTask","setEditedTask","handleSave","updatedTask","_objectSpread","title","task","updateTask","_jsx","Box","sx","children","_jsxs","Table","TableHead","TableRow","TableCell","Typography","TableBody","map","item","text","id","TextField","value","onChange","e","target","multiline","Button","onClick","CardMedia","component","image","done","alt","_Fragment","type","CalendarItemsActionTypes","UPDATE_TASK","payload","resetEditState","RESET_EDIT_STATE"],"sourceRoot":""}